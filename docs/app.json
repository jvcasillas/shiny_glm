[{"name":"app.R","content":"library(shiny)\nlibrary(shinythemes)\nlibrary(ggplot2)\nlibrary(tibble)\nlibrary(stargazer)\n\n# shinylive::export(\"app\", \"docs\")\n# httpuv::runStaticServer(\"docs\")\n\n# Define UI for application that draws a histogram\n\nui <- shinyUI(fluidPage(theme = shinytheme(\"spacelab\"),\n  \n  # Application title\n  titlePanel(\"GLM\", windowTitle = \"GLM\"),\n  \n  # Sidebar with dynamic variables\n  sidebarLayout(\n    sidebarPanel(width = 3, \n       selectInput(\"outcome_var\", \n                   \"Outcome variable:\",\n                  c(\"continuous\" = \"gaussian\", \n                    \"count\" = \"poisson\", \n                    \"categorical\" = \"binomial\")),\n       selectInput(\"dist_family\", \n                   \"Distribution family:\",\n                  c(\"gaussian\", \"poisson\", \"binomial\")),\n       div(align = \"center\", \n       numericInput(\"data_n\", \n                    withMathJax(\"$$N$$\"), \n                    value = 100, \n                    min = 1, \n                    max = 1000)),\n       div(align = \"center\", \n       numericInput(\"beta0\", \n                   withMathJax(\"$$\\\\beta_0$$\"), \n                   min = -20, \n                   max = 20, \n                   value = 0)), \n       div(align = \"center\", \n       numericInput(\"beta1\", \n                   withMathJax(\"$$\\\\beta_1$$\"), \n                   min = -10, \n                   max = 10, \n                   value = 0, \n                   step = 0.02)), \n       div(align = \"center\", \n       sliderInput(\"sigma\", \n                   withMathJax(\"$$\\\\sigma$$\"), \n                   min = 0, \n                   max = 10, \n                   value = 1)),\n       br(),\n       p(strong(\"Created by:\"), \n         tags$a(\"Joseph V. Casillas\", href=\"http://www.jvcasillas.com\"),\n       br(), \n         strong(\"Source code:\"), \n         tags$a(\"Github\", href=\"https://github.com/jvcasillas/shiny_glm\"))),\n    \n    # Show a plot of the generated distribution\n    mainPanel(\n      fluidRow(\n        column(8,\n        br(),\n        tabsetPanel(type = \"tabs\",\n          tabPanel(\"Plot\", plotOutput(\"glm_plot\")), \n          tabPanel(\"Residuals\", plotOutput(\"resid_plot\"))\n          )\n        ),\n        column(4,\n          br(),br(),br(),br(),br(),br(),br(),br(),\n          div(align = \"center\", tableOutput(\"values\"))\n        )\n      )\n    )\n  )\n))\n\n\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n    \n    output$currentTime <- renderText({\n      invalidateLater(1000)\n      paste(Sys.time())\n    })\n    \n    # x predictor\n    x <- reactive({\n      x <- runif(n = input$data_n, min = 0, max = 20)\n    })\n    \n    dist <- reactive({\n      dist <- input$dist_family  \n    })\n    \n    # Generate outcome\n    y <- reactive({\n      if (input$outcome_var == 'gaussian') {\n        y <- input$beta0 + x() * input$beta1 + rnorm(input$data_n, sd = input$sigma)\n      } else if (input$outcome_var == 'poisson'){\n        # compute mu's\n        mu <- exp(input$beta0 + x() * input$beta1)\n        y <- rpois(n = input$data_n, lambda = mu)\n      } else {\n        s <- input$beta0 + input$beta1 * x() + rnorm(input$data_n, sd = input$sigma)\n        y <- rbinom(input$data_n, size = 1, prob = exp(s) / (1 + exp(s)))\n      }\n    })\n\n\n    output$glm_plot <- renderPlot({\n      # Plot results\n      p1 <- tibble(x = x(), y = y()) |>\n        ggplot() + \n        aes(x = x, y = y) + \n        geom_point(size = 3, shape = 21, fill = \"#cc0033\", color = 'white') + \n        stat_smooth(\n          method = 'glm', \n          formula = 'y ~ x', \n          method.args = list(family = input$dist_family), \n          linewidth = 2, \n          color = \"black\"\n        ) + \n        theme_bw(base_family = 'Palatino', base_size = 20) + \n        theme(\n          panel.grid.major = element_line(linewidth = 0.5), \n          panel.grid.minor = element_line(linewidth = 0.5)\n        ) + \n      NULL\n      p1\n    })\n\n    mod <- reactive({\n      # fit model\n      mod <- glm(y() ~ x(), family = input$dist_family)\n    })\n\n    output$values <- renderPrint({\n      fit <- mod()\n      stargazer(fit, type = 'html', single.row=TRUE, \n                ci=TRUE, ci.level=0.95, align=FALSE,\n                covariate.labels = c(\"x\", \"Intercept\"), \n                dep.var.labels = \"y\")\n    })\n    \n    output$resid_plot <- renderPlot({\n      \n      my_theme <- function(...) {\n        list(\n          theme_bw(base_family = 'Palatino', base_size = 20), \n          theme(panel.grid.major = element_line(linewidth = 0.5), \n                panel.grid.minor = element_line(linewidth = 0.5))\n        )\n      }\n      \n      gg_qqplot <- function(vec) {\n        \n        # Get slope and intercept for qqline\n        # from base R's qqline()\n        y <- quantile(vec[!is.na(vec)], c(0.25, 0.75))\n        x <- qnorm(c(0.25, 0.75))\n        slope <- diff(y) / diff(x)\n        int <- y[1L] - slope * x[1L]\n        \n        # Calculate vec and qq correlation\n        the_cor <- cor(vec, qqnorm(vec)$x)\n        \n        # Create plot\n        tibble(resid = vec) |>\n          ggplot() + \n          aes(sample = resid) + \n          geom_point(stat = 'qq', shape = 21, size = 3) + \n          geom_abline(slope = slope, intercept = int, linewidth = 2) + \n          annotate(\"text\", x = -1, y = max(y), size = 8,\n                   label = paste0(\"r = \", round(the_cor, 4))) +\n          my_theme() \n      }\n      \n      vec <- y()\n      p2 <- gg_qqplot(vec)\n      p2\n    })\n  }\n\n\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n","type":"text"}]
